{
  "name": "co",
  "version": "4.5.4",
  "description": "generator async control flow goodness",
  "keywords": [
    "async",
    "flow",
    "generator",
    "coro",
    "coroutine"
  ],
  "devDependencies": {
    "browserify": "^10.0.0",
    "istanbul-harmony": "0",
    "mocha": "^2.0.0",
    "mz": "^1.0.2"
  },
  "scripts": {
    "test": "mocha --harmony",
    "test-cov": "node --harmony node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter dot",
    "test-travis": "node --harmony node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha --report lcovonly -- --reporter dot",
    "prepublish": "npm run browserify",
    "browserify": "browserify index.js -o ./co-browser.js -s co"
  },
  "files": [
    "index.js"
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tj/co.git"
  },
  "engines": {
    "iojs": ">= 1.0.0",
    "node": ">= 0.12.0"
  },
  "readme": "# co\r\n\r\n[![Gitter][gitter-image]][gitter-url]\r\n[![NPM version][npm-image]][npm-url]\r\n[![Build status][travis-image]][travis-url]\r\n[![Test coverage][coveralls-image]][coveralls-url]\r\n[![Downloads][downloads-image]][downloads-url]\r\n\r\n  Generator based control flow goodness for nodejs and the browser,\r\n  using promises, letting you write non-blocking code in a nice-ish way.\r\n\r\n## Co v4\r\n\r\n  `co@4.0.0` has been released, which now relies on promises.\r\n  It is a stepping stone towards [ES7 async/await](https://github.com/lukehoban/ecmascript-asyncawait).\r\n  The primary API change is how `co()` is invoked.\r\n  Before, `co` returned a \"thunk\", which you then called with a callback and optional arguments.\r\n  Now, `co()` returns a promise.\r\n\r\n```js\r\nco(function* () {\r\n  var result = yield Promise.resolve(true);\r\n  return result;\r\n}).then(function (value) {\r\n  console.log(value);\r\n}, function (err) {\r\n  console.error(err.stack);\r\n});\r\n```\r\n\r\n  If you want to convert a `co`-generator-function into a regular function that returns a promise,\r\n  you now use `co.wrap(fn*)`.\r\n\r\n```js\r\nvar fn = co.wrap(function* (val) {\r\n  return yield Promise.resolve(val);\r\n});\r\n\r\nfn(true).then(function (val) {\r\n\r\n});\r\n```\r\n\r\n## Platform Compatibility\r\n\r\n  `co@4+` requires a `Promise` implementation.\r\n  For versions of node `< 0.11` and for many older browsers,\r\n  you should/must include your own `Promise` polyfill.\r\n\r\n  When using node 0.11.x or greater, you must use the `--harmony-generators`\r\n  flag or just `--harmony` to get access to generators.\r\n\r\n  When using node 0.10.x and lower or browsers without generator support,\r\n  you must use [gnode](https://github.com/TooTallNate/gnode) and/or [regenerator](http://facebook.github.io/regenerator/).\r\n\r\n  io.js is supported out of the box, you can use `co` without flags or polyfills.\r\n\r\n## Installation\r\n\r\n```\r\n$ npm install co\r\n```\r\n\r\n## Associated libraries\r\n\r\nAny library that returns promises work well with `co`.\r\n\r\n- [mz](https://github.com/normalize/mz) - wrap all of node's code libraries as promises.\r\n\r\nView the [wiki](https://github.com/visionmedia/co/wiki) for more libraries.\r\n\r\n## Examples\r\n\r\n```js\r\nvar co = require('co');\r\n\r\nco(function *(){\r\n  // yield any promise\r\n  var result = yield Promise.resolve(true);\r\n}).catch(onerror);\r\n\r\nco(function *(){\r\n  // resolve multiple promises in parallel\r\n  var a = Promise.resolve(1);\r\n  var b = Promise.resolve(2);\r\n  var c = Promise.resolve(3);\r\n  var res = yield [a, b, c];\r\n  console.log(res);\r\n  // => [1, 2, 3]\r\n}).catch(onerror);\r\n\r\n// errors can be try/catched\r\nco(function *(){\r\n  try {\r\n    yield Promise.reject(new Error('boom'));\r\n  } catch (err) {\r\n    console.error(err.message); // \"boom\"\r\n }\r\n}).catch(onerror);\r\n\r\nfunction onerror(err) {\r\n  // log any uncaught errors\r\n  // co will not throw any errors you do not handle!!!\r\n  // HANDLE ALL YOUR ERRORS!!!\r\n  console.error(err.stack);\r\n}\r\n```\r\n\r\n## Yieldables\r\n\r\n  The `yieldable` objects currently supported are:\r\n\r\n  - promises\r\n  - thunks (functions)\r\n  - array (parallel execution)\r\n  - objects (parallel execution)\r\n  - generators (delegation)\r\n  - generator functions (delegation)\r\n\r\nNested `yieldable` objects are supported, meaning you can nest\r\npromises within objects within arrays, and so on!\r\n\r\n### Promises\r\n\r\n[Read more on promises!](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\r\n\r\n### Thunks\r\n\r\nThunks are functions that only have a single argument, a callback.\r\nThunk support only remains for backwards compatibility and may\r\nbe removed in future versions of `co`.\r\n\r\n### Arrays\r\n\r\n`yield`ing an array will resolve all the `yieldables` in parallel.\r\n\r\n```js\r\nco(function* () {\r\n  var res = yield [\r\n    Promise.resolve(1),\r\n    Promise.resolve(2),\r\n    Promise.resolve(3),\r\n  ];\r\n  console.log(res); // => [1, 2, 3]\r\n}).catch(onerror);\r\n```\r\n\r\n### Objects\r\n\r\nJust like arrays, objects resolve all `yieldable`s in parallel.\r\n\r\n```js\r\nco(function* () {\r\n  var res = yield {\r\n    1: Promise.resolve(1),\r\n    2: Promise.resolve(2),\r\n  };\r\n  console.log(res); // => { 1: 1, 2: 2 }\r\n}).catch(onerror);\r\n```\r\n\r\n### Generators and Generator Functions\r\n\r\nAny generator or generator function you can pass into `co`\r\ncan be yielded as well. This should generally be avoided\r\nas we should be moving towards spec-compliant `Promise`s instead.\r\n\r\n## API\r\n\r\n### co(fn*).then( val => )\r\n\r\nReturns a promise that resolves a generator, generator function,\r\nor any function that returns a generator.\r\n\r\n```js\r\nco(function* () {\r\n  return yield Promise.resolve(true);\r\n}).then(function (val) {\r\n  console.log(val);\r\n}, function (err) {\r\n  console.error(err.stack);\r\n});\r\n```\r\n\r\n### var fn = co.wrap(fn*)\r\n\r\nConvert a generator into a regular function that returns a `Promise`.\r\n\r\n```js\r\nvar fn = co.wrap(function* (val) {\r\n  return yield Promise.resolve(val);\r\n});\r\n\r\nfn(true).then(function (val) {\r\n\r\n});\r\n```\r\n\r\n## License\r\n\r\n  MIT\r\n\r\n[npm-image]: https://img.shields.io/npm/v/co.svg?style=flat-square\r\n[npm-url]: https://npmjs.org/package/co\r\n[travis-image]: https://img.shields.io/travis/tj/co.svg?style=flat-square\r\n[travis-url]: https://travis-ci.org/tj/co\r\n[coveralls-image]: https://img.shields.io/coveralls/tj/co.svg?style=flat-square\r\n[coveralls-url]: https://coveralls.io/r/tj/co\r\n[downloads-image]: http://img.shields.io/npm/dm/co.svg?style=flat-square\r\n[downloads-url]: https://npmjs.org/package/co\r\n[gitter-image]: https://badges.gitter.im/Join%20Chat.svg\r\n[gitter-url]: https://gitter.im/tj/co?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\r\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/tj/co/issues"
  },
  "homepage": "https://github.com/tj/co#readme",
  "_id": "co@4.5.4",
  "_from": "co@>=4.4.0 <5.0.0"
}
